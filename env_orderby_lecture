# 1.0 APIs the Django Way
    (rooms/views.py)
        from django.core import serializers
        from django.http import HttpResponse
        from rooms.models import Room


        def list_rooms(request):
            data = serializers.serialize("json", Room.objects.all()) # format: json, QuerySet: Room.objects.all()
            response = HttpResponse(content=data)
            return response

    django object를 가지고 있고 JSON으로 바꿔주고 싶다면 serializers를 이용
    무엇인가를 api 혹은 ios 애플리케이션에서 JSON으로 얻고 싶다면 serializers를 이용


# 1.1 @api_view
    (config/urls.py)
        path("api/v1/rooms/", include("rooms.urls"))

    pipenv install djangorestframework
    (config/settings.py)
        THIRD_PARTY_APPS = ["rest_framework"]

    (rooms/views.py)
        from rest_framework.decorators import api_view
        from rest_framework.response import Response


        @api_view(["GET", "POST", "DELETE"])
        def list_rooms(request):
            return Response()
    
    여기까지 해주고 /api/v1/rooms/list/ 로 이동해주면
    List Rooms에 대한 API 사이트? 를 볼 수 있다.
    Django REST Framework에 의해서 제공되는 페이지
    -> Web browsable API


# 1.2 Serializers
    Serializers는 python object를 json으로 또는 그 역으로 바꿔준다. field와 함께(FormField 처럼)
    
    (rooms/serializers.py)
        from rest_framework import serializers

        class RoomSerializer(serializers.Serializer):
            name = serializers.CharField(max_length=140)
            price = serializers.IntegerField()
            bedrooms = serializers.IntegerField()
            instant_book = serializers.BooleanField()

    (rooms/views.py)
        from rest_framework.decorators import api_view
        from rest_framework.response import Response
        from .models import Room
        from .serializers import RoomSerializer

        @api_view(["GET", "POST", "DELETE"])
        def list_rooms(request):
            rooms = Room.objects.all()
            serialized_rooms = RoomSerializer(rooms, many=True)
            return Response(data=serialized_rooms.data)


# 1.3 Serializers part Two
    (rooms/serializers.py)
        from rest_framework import serializers
        from .models import Room

        class RoomSerializer(serializers.ModelSerializer):

            class Meta:
                model = Room
                fields = ("name", "price", "instant_book", "user")

        /api/v1/rooms/list/ 로 이동해주면 fields에서 정해준 것들을 확인 가능
    
    (users/serializers.py)
        from rest_framework import serializers
        from .models import User

        class TinyUserSerializer(serializers.ModelSerializer):
            class Meta:
                model = User
                fields = ("username", "superhost")
    
    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import TinyUserSerializer
        from .models import Room

        class RoomSerializer(serializers.ModelSerializer):

            user = TinyUserSerializer()     # room에서 user를 serialize 하기 위해서, User모델에서 serialize된 user를 가져올 수 있다.

            class Meta:
                model = Room
                fields = ("name", "price", "instant_book", "user")


# 1.4 Class Based Views
    지금까지 한것을 CBV를 통해 똑같이 만들어보자
    (rooms/views.py)
        from rest_framework.views import APIView
        from rest_framework.respnse import Response
        from .models import Room
        from .serializers import RoomSerializer

        class ListRoomView(APIView):
            def get(self, request):
                rooms = Room.objects.all()
                serializer = RoomSerializer(rooms, many=True)
                return Response(serializer.data)
    
    (rooms/urls.py)
        urlpatterns = [path("list/", views.ListRoomView.as_view())]

    그냥 APIView 말고 편하게 쓸 수 있는 GenericView를 보자.
    GenericView 중의 하나인 ListAPIView를 이용하자.

    (rooms/views.py)
        from rest_framework.generics import ListAPIView
        from rest_framework.response import Response
        from .models import Room
        from .serializers import RoomSerializer


        class ListRoomsView(ListAPIView):

            queryset = Room.objects.all()
            serializer_class = RoomSerializer

    ListAPIView를 이용해서 더 짧은 코딩이 이루어졌다.

    Setting the pagination style
        PageNumberPagination
        (config.settings.py)
            # Django Rest Framework
            REST_FRAMEWORK = {
                'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
                'PAGE_SIZE': 10,
            }




# 1.5 ListAPIView
    ccbv.co.uk
    cdrf.co    : 고급 장고 REST 프레임워크 사이트

    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import TinyUserSerializer
        from .models import Room

        class RoomSerializer(serializers.ModelSerializer):

            user = TinyUserSerializer()

            class Meta:
                model = Room
                fields = ("pk", "name", "price", "instant_book", "user")


        class BigRoomSerializer(serializers.ModelSerializer):

            class Meta:
                model = Room
                fields = ("__all__")    # 또는 exclude = ()

    (rooms/views.py)
        from rest_framework.generics import ListAPIView, RetrieveAPIView
        from rest_framework.response import Response
        from .models import Room
        from .serializers import RoomSerializer, BigRoomSerializer


        class ListRoomsView(ListAPIView):

            queryset = Room.objects.all()
            serializer_class = RoomSerializer


        class SeeRoomView(RetrieveAPIView):
            
            queryset = Room.objects.all()
            serializer_class = BigRoomSerializer
            # lookup_url_kwarg = "pkkk"     # lookup_url_kwarg로 pk를 pkkk 등 원하는 것으로 변경 가능

    (rooms/urls.py)
        from django.urls import path
        from . import views

        app_name = "rooms"

        urlpatterns = [
            path("list/", views.ListRoomsView.as_view()),
            path("<int:pk>/", views.SeeRoomView.as_view()),
        ]

    여기까지 하면, 특정 room에 대한 API 정보?페이지에 접근 가능
    ex) /api/v1/rooms/42/


# 1.6 ModelViewSet
    ModelViewSet을 이용하면, Views.py에 아예 적을 필요가 없다.
    (rooms/viewsets.py)
        from rest_framework import viewsets
        from .models import Room
        from .serializers import BigRoomSerializer

        class RoomViewset(viewsets.ModelViewSet):
            queryset = Room.objects.all()
            serializer_class = BigRoomSerializer
    
    또한, urls를 기존과는 다른 방식으로 사용: router
    (rooms/urls.py)
        from rest_framework.routers import DefaultRouter
        from django.urls import path
        from . import viewsets


        app_name = "rooms"

        router = DefaultRouter()
        router.register("", viewsets.RoomViewset, basename="room")

        urlpatterns = router.urls

    이렇게 하고 api 페이지를 보면, views.py를 전혀 호출하지 않았는데 기존에 views.py에 정의해준 것들을 모두 이용하고있는 것을 볼 수 있다.
    모든 것이 오픈되어 있는 것이 단점


# 1.7 Bye Bye ViewSet


# 2.0 ListRoomsView & SeeRoomView
    (users/serializers.py)
        from rest_framework import serializers
        from .models import User

        class UserSerializer(serializers.ModelSerializer):
            class Meta:
                model = User
                exclude = (
                    "groups",
                    "user_permissions",
                    "password",
                    "last_login",
                    "is_superuser",
                    "is_staff",
                    "is_active",
                    "date_joined",
                    "favs",
                )

    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import UserSerializer
        from .models import Room

        class RoomSerializer(serializers.ModelSerializer):

            user = UserSerializer()

            class Meta:
                model = Room
                exclude = ("modified",)

    (roms/views.py)
        from rest_framework.generics import ListAPIView, RetrieveAPIView
        from rest_framework.response import Response
        from .models import Room
        from .serializers import RoomSerializer


        class ListRoomsView(ListAPIView):

            queryset = Room.objects.all()
            serializer_class = RoomSerializer


        class SeeRoomView(RetrieveAPIView):
            
            queryset = Room.objects.all()
            serializer_class = RoomSerializer


# 2.1 Create Room part One
    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import UserSerializer
        from .models import Room

        class ReadRoomSerializer(serializers.ModelSerializer):

            user = UserSerializer()

            class Meta:
                model = Room
                exclude = ("modified",)


        class WriteRoomSerializer(serializers.Serializer):

            name = serializers.CharField(max_length=140)
            address = serializers.CharField(max_length=140)
            price = serializers.IntegerField()
            beds = serializers.IntegerField(default=1)
            lat = serializers.DecimalField(max_digits=10, decimal_places=6)
            lng = serializers.DecimalField(max_digits=10, decimal_places=6)
            bedrooms = serializers.IntegerField(default=1)
            bathrooms = serializers.IntegerField(default=1)
            check_in = serializers.TimeField(default="00:00:00")
            check_out = serializers.TimeField(default="00:00:00")
            instant_book = serializers.BooleanField(default=False)

    (rooms/views.py)
        from rest_framework.generics import RetrieveAPIView
        from rest_framework.decorators import api_view
        from rest_framework.response import Response
        from rest_framework import status
        from .models import Room
        from .serializers import ReadRoomSerializer, WriteRoomSerializer


        @api_view(["GET", "POST"])
        def rooms_view(request):
            if request.method == "GET":
                rooms = Room.objects.all()
                serializer = ReadRoomSerializer(rooms, many=True).data
                return Response(serializer)
            elif request.method == "POST":
                serializer = WriteRoomSerializer(data=request.data)
                if serializer.is_valid():
                    return Response(status=status.HTTP_200_OK)
                else:
                    return Response(status=status.HTTP_400_BAD_REQUEST)


        class SeeRoomView(RetrieveAPIView):
            
            queryset = Room.objects.all()
            serializer_class = ReadRoomSerializer

    (rooms/urls.py)
        from django.urls import path
        from . import views


        app_name = "rooms"


        urlpatterns = [
            path("", views.rooms_view),
            path("<int:pk>/", views.SeeRoomView.as_view()),
        ]


# 2.2 Create Room part Two
    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import UserSerializer
        from .models import Room


        class ReadRoomSerializer(serializers.ModelSerializer):

            user = UserSerializer()

            class Meta:
                model = Room
                exclude = ("modified",)


        class WriteRoomSerializer(serializers.Serializer):

            name = serializers.CharField(max_length=140)
            address = serializers.CharField(max_length=140)
            price = serializers.IntegerField()
            beds = serializers.IntegerField(default=1)
            lat = serializers.DecimalField(max_digits=10, decimal_places=6)
            lng = serializers.DecimalField(max_digits=10, decimal_places=6)
            bedrooms = serializers.IntegerField(default=1)
            bathrooms = serializers.IntegerField(default=1)
            check_in = serializers.TimeField(default="00:00:00")
            check_out = serializers.TimeField(default="00:00:00")
            instant_book = serializers.BooleanField(default=False)

            def create(self, validated_data):                   # rooms/views.py에서 작성한 print(dir(serializer))를 통해서 확인한 method를 활용(create)
                return Room.objects.create(**validated_data)

        # 특히 serializer에 있는 method 중 다음 3가지를 유용하게 쓸 수 있다.
            create, update, save

    (rooms/views.py)
        from rest_framework.generics import RetrieveAPIView
        from rest_framework.decorators import api_view
        from rest_framework.response import Response
        from rest_framework import status
        from .models import Room
        from .serializers import ReadRoomSerializer, WriteRoomSerializer


        @api_view(["GET", "POST"])
        def rooms_view(request):
            if request.method == "GET":
                rooms = Room.objects.all()[:5]
                serializer = ReadRoomSerializer(rooms, many=True).data
                return Response(serializer)
            elif request.method == "POST":
                if not request.user.is_authenticated:
                    return Response(status=status.HTTP_401_UNAUTHORIZED)
                serializer = WriteRoomSerializer(data=request.data)
                print(dir(serializer))              # dir(serializer) 를 통해 내부 method를 보고 활용
                if serializer.is_valid():          
                    room = serializer.save(user=request.user)       # rooms/serializers.py에서 create 해준 serializer를 save
                                                                    # save method는 create인지 update인지 자동으로 감지
                                                                    # create, update를 직접 call하면 안되고, save를 통해야 한다.
                                                                    # create method는 object instance를 return 해야 한다.
                    room_serializer = ReadRoomSerializer(room).data
                    return Response(data=room_serializer, status=status.HTTP_200_OK)
                else:
                    return Response(status=status.HTTP_400_BAD_REQUEST)


        class SeeRoomView(RetrieveAPIView):

            queryset = Room.objects.all()
            serializer_class = ReadRoomSerializer

    (rooms/models.py)
        class Room(CoreModel):

            class Meta:
                ordering = ["-pk"]      # 생성된 room을 최상단에서 보려고 수정


# 2.3 Room Detail GET

    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import UserSerializer
        from .models import Room


        class ReadRoomSerializer(serializers.ModelSerializer):

            user = UserSerializer()

            class Meta:
                model = Room
                exclude = ("modified",)


        class WriteRoomSerializer(serializers.Serializer):

            name = serializers.CharField(max_length=140)
            address = serializers.CharField(max_length=140)
            price = serializers.IntegerField()
            beds = serializers.IntegerField(default=1)
            lat = serializers.DecimalField(max_digits=10, decimal_places=6)
            lng = serializers.DecimalField(max_digits=10, decimal_places=6)
            bedrooms = serializers.IntegerField(default=1)
            bathrooms = serializers.IntegerField(default=1)
            check_in = serializers.TimeField(default="00:00:00")
            check_out = serializers.TimeField(default="00:00:00")
            instant_book = serializers.BooleanField(default=False)

            def create(self, validated_data):
                return Room.objects.create(**validated_data)

            def validate(self, data):                   # def validate는 전부에 대한 접근(두가지 등 한번에 validate 할 때), 특정 부분에 접근시에는 def validate_beds 등의 방식으로 정의
                if not self.instance:
                    check_in = data.get('check_in')
                    check_out = data.get('check_out')
                    if check_in == check_out:
                        raise serializers.ValidationError("Not enough time between changes")
                return data

    (rooms/views.py)
        from django.http.response import Http404
        from rest_framework.views import APIView
        from rest_framework.response import Response
        from rest_framework import status
        from .models import Room
        from .serializers import ReadRoomSerializer, WriteRoomSerializer


        class RoomsView(APIView):               #  이와 같이 FBV를 CBV로 변경 가능(동일하게 표시 되어야 한다. 단, url 수정)

            def get(self, request):
                rooms = Room.objects.all()[:5]
                serializer = ReadRoomSerializer(rooms, many=True).data
                return Response(serializer)

            def post(self, request):
                if not request.user.is_authenticated:
                    return Response(status=status.HTTP_401_UNAUTHORIZED)
                serializer = WriteRoomSerializer(data=request.data)
                if serializer.is_valid():
                    room = serializer.save(user=request.user)
                    room_serializer = ReadRoomSerializer(room).data
                    return Response(data=room_serializer, status=status.HTTP_200_OK)
                else:
                    return Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        
        class RoomView(APIView):              # RetrieveAPIView를 없애고 APIView로 대체해보자
            def get(self, request, pk):
                try:
                    room = Room.objects.get(pk=pk)
                    serializer = ReadRoomSerializer(room).data
                    return Response(serializer)
                except Room.DoesNotExist:
                    return Response(status=status.HTTP_404_NOT_FOUND)

            def put(self, request):
                pass

            def delete(self, request):
                pass


# 2.4 Room Detail DELETE PUT part One
    (rooms/views.py)
        from django.http.response import Http404
        from rest_framework.views import APIView
        from rest_framework.response import Response
        from rest_framework import status
        from .models import Room
        from .serializers import ReadRoomSerializer, WriteRoomSerializer


        class RoomsView(APIView):

            def get(self, request):
                rooms = Room.objects.all()[:5]
                serializer = ReadRoomSerializer(rooms, many=True).data
                return Response(serializer)

            def post(self, request):
                if not request.user.is_authenticated:
                    return Response(status=status.HTTP_401_UNAUTHORIZED)
                serializer = WriteRoomSerializer(data=request.data)
                if serializer.is_valid():
                    room = serializer.save(user=request.user)
                    room_serializer = ReadRoomSerializer(room).data
                    return Response(data=room_serializer, status=status.HTTP_200_OK)
                else:
                    return Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)


        class RoomView(APIView):

            def get_room(self, pk):                         # 계속 반복되는 method라 미리 만들어둚
                try:
                    room = Room.objects.get(pk=pk)
                    return room
                except Room.DoesNotExist:
                    return None

            def get(self, request, pk):
                room = self.get_room(pk)                     # 위에서 만들어둔 get_room method 활용
                if room is not None:
                    serializer = ReadRoomSerializer(room).data
                    return Response(serializer)
                else:
                    return Response(status=status.HTTP_404_NOT_FOUND)

            def put(self, request, pk):
                pass

            def delete(self, request, pk):
                room = self.get_room(pk)
                if room.user != request.user:
                    return Response(status=status.HTTP_403_FORBIDDEN)
                if room is not None:
                    room.delete()
                    return Response(status=status.HTTP_200_OK)
                else:
                    return Response(status=status.HTTP_404_NOT_FOUND)

    (rooms/serializers.py)
        from rest_framework import serializers
        from users.serializers import UserSerializer
        from .models import Room


        class ReadRoomSerializer(serializers.ModelSerializer):

            user = UserSerializer()

            class Meta:
                model = Room
                exclude = ("modified",)


        class WriteRoomSerializer(serializers.Serializer):

            name = serializers.CharField(max_length=140)
            address = serializers.CharField(max_length=140)
            price = serializers.IntegerField()
            beds = serializers.IntegerField(default=1)
            lat = serializers.DecimalField(max_digits=10, decimal_places=6)
            lng = serializers.DecimalField(max_digits=10, decimal_places=6)
            bedrooms = serializers.IntegerField(default=1)
            bathrooms = serializers.IntegerField(default=1)
            check_in = serializers.TimeField(default="00:00:00")
            check_out = serializers.TimeField(default="00:00:00")
            instant_book = serializers.BooleanField(default=False)

            def create(self, validated_data):
                return Room.objects.create(**validated_data)

            def validate(self, data):
                if not self.instance:
                    check_in = data.get('check_in')
                    check_out = data.get('check_out')
                    if check_in == check_out:
                        raise serializers.ValidationError("Not enough time between changes")
                return data
            

            def update(self, instance, validated_data):     # update method는 instance라는 인자를 갖는데, 이로 인해서 django가 create인지 update인지 구분할 수가 있다.
                                                            # RoomsView에서 room을 post를 통해 create 한다면 serialier를 data만을 이용해서 initialize 한다.
                                                            # update를 한다면, instance를 가지고 serializer를 initialize 해야하는 것을 알려주기 때문에 create, update를 save가 자동으로 구분
                                                            # 이제 이를 이용해서 views.py/RoomView의 put을 채워보자
                print(instance, validated_data)
                return Room.objects.update(**validated_date)             


    (rooms/views.py)
        from django.http.response import Http404
        from rest_framework.views import APIView
        from rest_framework.response import Response
        from rest_framework import status
        from .models import Room
        from .serializers import ReadRoomSerializer, WriteRoomSerializer


        class RoomsView(APIView):

            def get(self, request):
                rooms = Room.objects.all()[:5]
                serializer = ReadRoomSerializer(rooms, many=True).data
                return Response(serializer)

            def post(self, request):
                if not request.user.is_authenticated:
                    return Response(status=status.HTTP_401_UNAUTHORIZED)
                serializer = WriteRoomSerializer(data=request.data)
                if serializer.is_valid():
                    room = serializer.save(user=request.user)
                    room_serializer = ReadRoomSerializer(room).data
                    return Response(data=room_serializer, status=status.HTTP_200_OK)
                else:
                    return Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)


        class RoomView(APIView):

            def get_room(self, pk):
                try:
                    room = Room.objects.get(pk=pk)
                    return room
                except Room.DoesNotExist:
                    return None

            def get(self, request, pk):
                room = self.get_room(pk)
                if room is not None:
                    serializer = ReadRoomSerializer(room).data
                    return Response(serializer)
                else:
                    return Response(status=status.HTTP_404_NOT_FOUND)

            def put(self, request, pk):
                room = self.get_room(pk)
                if room is not None:
                    if room.user != request.user:
                        return Response(status=status.HTTP_403_FORBIDDEN)
                    serializer = WriteRoomSerializer(room, data=request.data, partial=True)     # room이 instance가 된다 - 이 room을 넣지 않으면 serializer는 update가 아닌 create하는 것으로 인지한다.  
                                                                                                # partial=True: 데이터를 모두 보내는 것이 아니라 내가 바꾸고 싶은 데이터만 보내게 하는 것
                    if serializer.is_valid():
                        serializer.save()
                    else:
                        return Response(serializer.erros, status=status.HTTP_400_BAD_REQUEST)
                    return Response()
                else:
                    return Response(status=status.HTTP_404_NOT_FOUND)

            def delete(self, request, pk):
                room = self.get_room(pk)
                if room.user != request.user:
                    return Response(status=status.HTTP_403_FORBIDDEN)
                if room is not None:
                    room.delete()
                    return Response(status=status.HTTP_200_OK)
                else:
                    return Response(status=status.HTTP_404_NOT_FOUND)